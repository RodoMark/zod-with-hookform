import { useState, useEffect } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

import type { NextPage } from 'next';
import Head from 'next/head';

import styles from '../styles/Home.module.css';

import z from 'zod';

const Home: NextPage = () => {
  const maritalStatuses = ['single', 'married', 'divorced', 'widowed'] as const;
  type MaritalStatus = (typeof maritalStatuses)[number];

  const mappedMaritalStatuses: { [key in MaritalStatus]: string } = {
    single: 'Single',
    married: 'Married',
    divorced: 'Divorced',
    widowed: 'Widowed',
  };

  const maritalOptions = Object.entries(mappedMaritalStatuses).map(
    ([value, label]) => {
      return (
        <option value={value} key={value}>
          {label}
        </option>
      );
    }
  );

  const UserSchema = z.object({
    email: z.string().email({ message: 'An email is required' }),
    name: z
      .string()
      .min(1, { message: 'A name is required' })
      .max(50, { message: 'The name is too long' }),
    age: z
      .string()
      .optional()
      .transform((val) => {
        return val ? Number(val) : null;
      }),
    maritalStatus: z.enum(maritalStatuses, {
      errorMap: () => ({ message: 'Please enter your marital status' }),
    }),
    bestFood: z.literal('Pizza', {
      errorMap: () => ({ message: 'Pizza is the best food, no exceptions.' }),
    }),
  });

  type User = z.infer<typeof UserSchema>;

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
  } = useForm<User>({
    defaultValues: {
      name: '',
      email: '',
      age: undefined,
      maritalStatus: 'single',
      bestFood: 'Pizza',
    },
    resolver: zodResolver(UserSchema),
  });

  const onSubmit: SubmitHandler<User> = (data) => {
    console.log(data);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form className={styles['user-form']} onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            disabled={isSubmitting}
            {...register('name')}
          />
          {errors?.name?.message && <div>{errors.name.message}</div>}
          <label htmlFor="email">Email</label>
          <input
            type="text"
            id="email"
            disabled={isSubmitting}
            {...register('email')}
          />
          {errors?.email?.message && <div>{errors.email.message}</div>}
          <label htmlFor="age">Age</label>
          <input
            type="number"
            id="age"
            disabled={isSubmitting}
            {...register('age')}
          />
          <label htmlFor="maritalStatus">Marital status</label>
          {errors?.age?.message && <div>{errors.age.message}</div>}
          <select id="maritalStatus" {...register('maritalStatus')}>
            {maritalOptions}
          </select>
          {errors?.maritalStatus?.message && (
            <div>{errors.maritalStatus.message}</div>
          )}
          <label htmlFor="bestFood">What is the best food?</label>
          <input
            type="text"
            id="bestFood"
            disabled={isSubmitting}
            {...register('bestFood')}
          />
          {errors?.bestFood?.message && <div>{errors.bestFood.message}</div>}
          <button type="submit">Submit</button>
          <pre>{JSON.stringify(watch(), null, 2)}</pre>
        </form>
      </main>
    </div>
  );
};

export default Home;
